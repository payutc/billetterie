<?php

namespace Payutc\OnyxBundle\Entity;

use DateTime;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Payutc\OnyxBundle\Entity\Base\Deletable\DeletableEntityRepositoryInterface;
use Payutc\OnyxBundle\Entity\Base\Activable\ActivableEntityRepositoryInterface;

/**
 * PriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PriceRepository extends EntityRepository implements DeletableEntityRepositoryInterface, ActivableEntityRepositoryInterface
{
	/**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
	public function findAll()
	{
		return $this->findAllNotDeleted();
	}

	/**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
	public function findAllNotDeleted()
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('p')
			->from('PayutcOnyxBundle:Price', 'p')
			->where($qb->expr()->isNull('p.removedAt'))
		;

		return $qb->getQuery()->getResult();
	}

	/**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return array
     */
	public function findAllActive()
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('p')
			->from('PayutcOnyxBundle:Price', 'p')
			->where($qb->expr()->isNull('p.removedAt'))
			->andWhere('p.isHidden = :isHidden')
			->setParameter('isHidden', false)
		;

		return $qb->getQuery()->getResult();
	}

	/**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false, for a given Event.
     *
     * @param Event $event
     * @return array
     */
	public function findAllActiveByEvent($event)
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('p')
			->from('PayutcOnyxBundle:Price', 'p')
			->where($qb->expr()->isNull('p.removedAt'))
			->andWhere('p.isHidden = :isHidden')
			->andWhere('p.event = :event')
			->setParameter('isHidden', false)
			->setParameter('event', $event)
		;

		return $qb->getQuery()->getResult();
	}

	public function getQBOfAvailableForEventAndUserGroups($event, $userGroups)
	{
		$qb = $this->_em->createQueryBuilder();

		$qb->select('p')
			->from('PayutcOnyxBundle:Price', 'p')
			->leftJoin('p.userGroups', 'ug')
			->where($qb->expr()->isNull('p.removedAt'))
			->andWhere('p.isHidden = :isHidden')
            ->andWhere('p.endAt > :endAt')
			->andWhere('p.event = :event')
			->setParameter('isHidden', false)
			->setParameter('event', $event)
            ->setParameter('endAt', new DateTime())
		;

        if (!(is_null($userGroups)) && count($userGroups) > 0) {
            $qb->andWhere($qb->expr()->in('ug.id', ':userGroups'))->setParameter('userGroups', $userGroups);
        }

		return $qb;
	}
}
